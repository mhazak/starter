@mixin clearfix { 
	&::after { content: ""; clear: both; display: table; }
}

@mixin center_horizontal {
	position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);
}

/*
	media query 

	0		-	600px   -> phone
	600		-	900px   -> tablet portrait
	900		-	1200px	-> tablet landscape
	1200	-	1800px	-> default (desktop)
	1800+				-> big desktop		


	by creating a mixin we can use this mixin in whole code without defining max/min-width. It is all defined in one place.

	e.g. here we can define 
	
	@mixin respond-phone {
		@media (max-width: 600px) { @content };
	}

	and in some css element we will just import this mixin.

	e.g.

	.fokume {
		background-color: black;
		@import respond-phone { background-color: white; }
	}

	so basically when the resolution of screen will have width up to 600px, background will be white,
	if resolution will be higher, background will be white. (background-color: white; will be implement into mixin
	instead of @content)

*/

@mixin respond-phone {
	@media (max-width: 600px) { @content };
}

/*
	BREAKPOINT VARIABLES

	- phone
	- tab-port
	- tab-land
	- big-desktop


	1em = 16px

*/


@mixin respond($breakpoint) {

	@if $breakpoint == phone {
		@media only screen and (max-width: 37.5em) { @content }; // 600px
	}
	@if $breakpoint == tab-port {
		@media only screen and (max-width: 56.25em) { @content }; // 900px
	}
	@if $breakpoint == tab-land {
		@media only screen and (max-width: 75em) { @content }; // 1200px
	}
	@if $breakpoint == big-desktop {
		@media only screen and (min-width: 112.5em) { @content }; // 1800px
	}
	
}